---
interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/blog-placeholder-1.png" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link
  rel="preload"
  href="/fonts/atkinson-regular.woff"
  as="font"
  type="font/woff"
  crossorigin
/>
<link
  rel="preload"
  href="/fonts/atkinson-bold.woff"
  as="font"
  type="font/woff"
  crossorigin
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<script is:inline>
  // ☝️ This script prevent the FART effect.
  if (localStorage.getItem("theme") === null) {
    document.documentElement.setAttribute("data-theme", "light");
  } else
    document.documentElement.setAttribute(
      "data-theme",
      localStorage.getItem("theme"),
    );
</script>
<script>
  import { themeChange } from "theme-change";
  themeChange();
</script>

<!-- Must be a global style to activate rehype plugin pretty code line counter -->
<style is:global>
  code[data-line-numbers] {
    counter-reset: line;
  }

  code[data-line-numbers] > [data-line]::before {
    counter-increment: line;
    content: counter(line);

    /* Other styling */
    display: inline-block;
    width: 0.75rem;
    margin-right: 2rem;
    text-align: right;
    color: gray;
  }

  code[data-line-numbers-max-digits="2"] > [data-line]::before {
    width: 1.25rem;
  }

  code[data-line-numbers-max-digits="3"] > [data-line]::before {
    width: 1.75rem;
  }

  code[data-line-numbers-max-digits="4"] > [data-line]::before {
    width: 2.25rem;
  }

  code {
    /* No need to use overflow scroll, because that will offset scrollbar */
    /* to the right and overlap with copy button */
    /* Scrollbar is already enabled by default */
    max-height: 36.25rem;
  }

  // This is so we have a line wrap effect, for example
  // const x = 123333333333333333333333333333  <= continue to the right edge
  // 333333333333333333
  // And not like this
  // cost x =     <= unexpected line break
  // 33333333333333333333333333333333
  code > span {
    margin-right: 2rem;
  }

  code > span > span {
    word-break: break-all;
    white-space: pre-wrap;
  }
</style>
