---
import type { MarkdownHeading } from "astro";
import { Fragment } from "astro/jsx-runtime";

type Props = { headings: MarkdownHeading[]; currentDepth: number };
const { headings, currentDepth = 2 } = Astro.props;
const headingsWithIndex = headings.map((heading, index) => ({
  ...heading,
  index,
}));
const headingsOfCurrentDepth = headingsWithIndex
  .map((heading, index) => ({ ...heading, index }))
  .filter((heading) => heading.depth === currentDepth);
---

{
  headingsOfCurrentDepth.map((currentDepthHeading, index) => {
    // Find nested items for the current item
    const nextHeadingOfCurrentDepth =
      headingsOfCurrentDepth[index + 1] ?? false;
    const nestedHeadings = headingsWithIndex.filter((subHeading) => {
      return (
        subHeading.depth > currentDepthHeading.depth &&
        // Maximum is H6, but Astro compiler does not allow <= operator, so use < instead
        subHeading.depth < 7 &&
        subHeading.index > currentDepthHeading.index &&
        (nextHeadingOfCurrentDepth
          ? subHeading.index < nextHeadingOfCurrentDepth.index
          : true)
      );
    });
    // Prefer not to have collapsible submenu
    // Because it may confuse users where to click to collapse
    // and where to click to scroll. This leads to worse user experience
    return (
      <li class="not-prose">
        {nestedHeadings.length > 0 ? (
          <>
            <a href={`#${currentDepthHeading.slug}`}>
              {currentDepthHeading.text}
            </a>
            <ul>
              <Astro.self
                headings={nestedHeadings}
                currentDepth={currentDepth + 1}
              />
            </ul>
          </>
        ) : (
          <a href={`#${currentDepthHeading.slug}`}>
            {currentDepthHeading.text}
          </a>
        )}
      </li>
    );
  })
}
